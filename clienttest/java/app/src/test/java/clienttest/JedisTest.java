/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clienttest;

import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import redis.clients.jedis.HostAndPort;
import redis.clients.jedis.JedisCluster;

import java.util.List;
import java.util.function.BiFunction;

import static org.testng.Assert.assertEquals;

public class JedisTest {
    JedisCluster jc;

    @BeforeClass
    public void setUp() {
        var node = new HostAndPort(Utils.getNodeHost(), Utils.getNodePort());
        this.jc = new JedisCluster(node);
    }

    String genKey(String testCase, String key) {
        final var now = new java.util.Date();
        return String.format("jedis:%d:%s:%s", now.toInstant().toEpochMilli(), testCase, key);
    }

    @Test
    public void singleKeyCommand() {
        final var key = this.genKey("singleKey", "somekey");
        final var value = "value";
        this.jc.setex(key, 60, value);
        final var v = this.jc.get(key);
        assertEquals(value, v);
    }

    @Test
    public void multiKeyCommand() {
        // for hashtag,  refers to https://redis.io/topics/cluster-spec
        final var key1 = this.genKey("multikey", "key1:{hashtag}");
        final var key2 = this.genKey("multikey", "key2:{hashtag}");
        final var value1 = "value1";
        final var value2 = "value2";

        this.jc.mset(key1, value1, key2, value2);
        final var values = this.jc.mget(key1, key2);
        assertEquals(values.size(), 2);
        assertEquals(values.get(0), value1);
        assertEquals(values.get(1), value2);
    }

    @Test
    public void multiKeyNXCommand() {
        // for hashtag,  refers to https://redis.io/topics/cluster-spec
        final var key1 = this.genKey("multikey_nx", "key1:{hashtag}");
        final var key2 = this.genKey("multikey_nx", "key2:{hashtag}");
        final var key3 = this.genKey("multikey_nx", "key3:{hashtag}");
        final var value1 = "value1";
        final var value2 = "value2";
        final var value3 = "value3";

        this.jc.mset(key1, value1, key2, value2);
        final var values = this.jc.mget(key1, key2);
        assertEquals(values.size(), 2);
        assertEquals(values.get(0), value1);
        assertEquals(values.get(1), value2);

        long nSet = this.jc.msetnx(key3, value3, key1, value1);
        assertEquals(nSet, 0L);
    }

    @Test
    public void brpoplpush() throws InterruptedException {
        final var key1 = this.genKey("blocking", "brpoplpush_key1:{hashtag}");
        final var key2 = this.genKey("blocking", "brpoplpush_key2:{hashtag}");
        final var value = "listvalue";

        Runnable blockingCmd = () -> {
            final var res = this.jc.brpoplpush(key1, key2, 60);
            assertEquals(res, value);
        };
        var thread = new Thread(blockingCmd);
        thread.start();

        Thread.sleep(1000);
        var listLen = this.jc.rpush(key1, value);
        assertEquals(listLen, Long.valueOf(1));

        thread.join();
    }

    @Test
    void blpop() throws InterruptedException {
        listBlockingCommandHelper((key1, key2) -> this.jc.blpop(60, key1, key2));
    }

    @Test
    void brpop() throws InterruptedException {
        listBlockingCommandHelper((key1, key2) -> this.jc.brpop(60, key1, key2));
    }

    void listBlockingCommandHelper(BiFunction<String, String, List<String>> cmdFunc) throws InterruptedException {
        final var key1 = this.genKey("blocking", "key1:{hashtag}");
        final var key2 = this.genKey("blocking", "key2:{hashtag}");
        final var value = "listvalue";

        Runnable blockingCmd = () -> {
            final var res = cmdFunc.apply(key1, key2);
            assertEquals(res.size(), 2);
            assertEquals(res.get(0), key2);
            assertEquals(res.get(1), value);
        };
        var thread = new Thread(blockingCmd);
        thread.start();

        Thread.sleep(1000);
        var listLen = this.jc.rpush(key2, value);
        assertEquals(listLen, Long.valueOf(1));

        thread.join();
    }

    // Jedis still does not support BZPOPMIN, BZPOPMAX
    // https://github.com/redis/jedis/issues/2177
}
